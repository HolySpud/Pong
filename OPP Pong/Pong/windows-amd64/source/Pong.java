/* autogenerated by Processing revision 1279 on 2022-05-09 */
import processing.core.*;
import processing.data.*;
import processing.event.*;
import processing.opengl.*;

import java.util.HashMap;
import java.util.ArrayList;
import java.io.File;
import java.io.BufferedReader;
import java.io.PrintWriter;
import java.io.InputStream;
import java.io.OutputStream;
import java.io.IOException;

public class Pong extends PApplet {

//Global Variables
Boolean win = false;

Ball gameBall;
Paddle rightPaddle;
Paddle leftPaddle;
Background gameBG;
ScoreBoard rightScoreBoard;
ScoreBoard leftScoreBoard;
GameMenu mainMenu;
Instructions tutorial;
//
Shape shape1 = new Shape(0,0,300,300) {
   public void draw() {
  fill(0xFFFFFFFF);
  rect(x,y,w,h);
  fill(0xFFFFFFFF);
  }
  }
  ;
 public void setup() { //Start
  /* size commented out by preprocessor */; // fullScreen(); displayWidth, displayHeight
  //Object, Class
  //Instructions, Features, and Hints for Easter Eggs
  
  //Constructors
  gameBall = new Ball(width/2, height/2, height/25, height/25, width, height, 0xFFFFFFFF); // (X, Y, W, H, Width, Height, Color)
  rightPaddle = new Paddle(width - width/50, height/2, width/50, height/4, 0xFFA9A9A9, 'i', 'k'); // (X, Y, W, H, Color, Up Key, Down Key)
  leftPaddle = new Paddle(0, height/2, width/50, height/4, 0xFFA9A9A9, 'w', 's'); // (X, Y, W, H, Color, Up Key, Down Key)
  gameBG = new Background(0xFFFFFFFF); // (Color)
  rightScoreBoard = new ScoreBoard(width - width/4 - (width/15)/2, height/20, width/15, height/15); // (X, Y, W, H)
  leftScoreBoard = new ScoreBoard(width/4 - width/15, height/20, width/15, height/15); // (X, Y, W, H)
  mainMenu = new GameMenu();
  tutorial = new Instructions();
  
  println("So cool...");
  // exit();
} //End
 public void draw() {
  if (start) {
  gameStart(); 
  } else if (start == false && info) {
  tutorial.instructionDraw(rightPaddle, leftPaddle);
  } else if (start == false) {
  mainMenu.menuGuide();
  } 
  
}

 public void keyPressed() {
  rightPaddle.moveStart();
  leftPaddle.moveStart();
}
 public void keyReleased() {
  rightPaddle.moveStop();
  leftPaddle.moveStop();
  mainMenu.allBind();
  tutorial.instructionExit();
}
 public void mousePressed() {
}
 public void mouseReleased() {
}
class Background {
int c;

Background(int cParameter) {
c = cParameter;
}
 public void drawBG() {
fill(c);
rect(0, 0, width, height);
}

}
class Ball extends Shape {
float xStart, yStart;
int c;
int xVel, yVel, score, xDirection, yDirection;

//int ballCount = 10;
Ball(float x, float y, float w, float h, float widthParameter, float heightParameter, int cParameter) {
super(x, y, w, h);
xStart = x;
yStart = y;
c = cParameter;
xDirection = PApplet.parseInt(random (-2, 2));
while (xDirection == 0) {xDirection = PApplet.parseInt(random (-2, 2));}
yDirection = PApplet.parseInt(random (-2, 2));
while (yDirection == 0) {yDirection = PApplet.parseInt(random (-2, 2));}
xVel = PApplet.parseInt(random(widthParameter/widthParameter, widthParameter/widthParameter*10)) * xDirection;
yVel = PApplet.parseInt(random(heightParameter/heightParameter, heightParameter/heightParameter*10)) * yDirection;
} //End Constructor
//
 public void drawCircle(Paddle left, Paddle right, ScoreBoard scoreRight, ScoreBoard scoreLeft, GameMenu mainMenu) {
fill(c);
ellipse(x, y, w, h);
move(left, right, scoreRight, scoreLeft, mainMenu);
} //End Draw

 public void scoreCheck(ScoreBoard scoreRight, ScoreBoard scoreLeft, GameMenu menuMain) { // Checks when player has reached end score and provides a "win" screen
if (scoreRight.score >= menuMain.scoreMax || scoreLeft.score >= menuMain.scoreMax && win == false) {
  textAlign(CENTER, CENTER);
  text("YOU WIN", width/2, height/10);
  xVel *= 0;
  yVel *= 0;
  x = xStart;
  y = yStart;
  test();
  } 
}

 public void test() {
start = false;
delay(1000);
}

 public void score() { // Score function that resets ball position and randomizes it's velocity and direction
  xVel *= 0;
  yVel *= 0;
  x = xStart;
  y = yStart;
  delay(1000);
  xDirection = PApplet.parseInt(random (-2, 2));
  while (xDirection == 0) {xDirection = PApplet.parseInt(random (-2, 2));}
  yDirection = PApplet.parseInt(random (-2, 2));
  while (yDirection == 0) {yDirection = PApplet.parseInt(random (-2, 2));}
  xVel = PApplet.parseInt(random(x/x, x/x*10)) * xDirection;
  yVel = PApplet.parseInt(random(y/y, y/y*10)) * yDirection;
}

 public void move(Paddle left, Paddle right, ScoreBoard scoreRight, ScoreBoard scoreLeft, GameMenu menuMain) { // 
x += (xVel * menuMain.ballSpeed);
y += (yVel * menuMain.ballSpeed);
bounce(left, right, scoreRight, scoreLeft);
scoreCheck(scoreRight, scoreLeft, menuMain);
paddleBounce();
}

 public void bounce(Paddle left, Paddle right, ScoreBoard scoreRight, ScoreBoard scoreLeft) {
// Horizontal Bouncing
if (x - w/2 <= width*0) {
scoreLeft.score++;
score();
}
if (x + w/2 > width) {
scoreRight.score++;
score();
}
// Paddle Bouncing (Left, Right)
if (y > left.y && y < left.y + left.h && x - w/2 <= left.x + left.w) {
xVel *= -1;
}
if (y > right.y && y < right.y + right.h && x + w/2 >= right.x) {
xVel *= -1;
}
// Vertical Bouncing
if (y - w/2 <= height*0 || y + w/2 > height) {
yVel *= -1;
}
}

 public void paddleBounce() {
}

 public void ballScore() {
}

} //End Ball
 public void ballCollision() {

}
// Global Settings Variables
Boolean start = false;

class GameMenu {
char startLet, paddleCap, paddleLow, ballCap, ballLow, scoreCap, scoreLow;
int paddleSpeed, ballSpeed, scoreMax;

GameMenu() {
startLet = ' ';

paddleCap = 'B';
paddleLow = 'b';

ballCap = 'N';
ballLow = 'n';

scoreCap = 'M';
scoreLow = 'm';

paddleSpeed = 1;
ballSpeed = 1;
scoreMax = 3;

}

 public void menuGuide() {
PFont titleFont = createFont("Power Clear", 20);
gameBG.drawBG();
fill(0xFFD05CEA); //Ink
textAlign(CENTER, CENTER); //Align X&Y, see Processing.org / Reference
textFont(titleFont, width/15);
text("PONG", width/2, height/6);
textFont(titleFont, height/17);
text("(P) Controls", width/2, height/2.5f);
text("(" + str(paddleCap) + ") " + "Paddle Speed: " + str(paddleSpeed), width/4, height/2);
text("(" + str(ballCap) + ") " + "Ball Speed: " + str(ballSpeed), width/2, height/2);
text("(" + str(scoreCap) + ") " + "Max score: " + str(scoreMax), width/1.35f, height/2);
textFont(titleFont, width/25);
text("PRESS SPACE TO START", width/2, height/1.5f);
}

 public void startBind() {
if (key == ' ' && start == false) {
 start = true;
 }
}

 public void paddleBind() {
if (key == 'B' || key == 'b' && paddleSpeed < 4 && start == false) {
   paddleSpeed++;
 } if (key == 'B' || key == 'b' && paddleSpeed == 4 && start == false) { 
   paddleSpeed = 1;
 }
}

 public void ballBind() {
if (key == 'N' || key == 'n' && ballSpeed < 4 && start == false) {
   ballSpeed++;
 } if (key == 'N' || key == 'n' && ballSpeed == 4 && start == false) {
   ballSpeed = 1;
 }
}

 public void scoreBind() {
if (key == 'M' || key == 'm' && scoreMax < 7 && start == false) {
   scoreMax++;
 } if (key == 'M' || key == 'm' && scoreMax == 7 && start == false) {
   scoreMax = 3;
 }
}

 public void allBind() {
startBind();
paddleBind();
ballBind();
scoreBind();
}

}
 public void gameStart() {
gameBG.drawBG(); //BG Reset
gameBall.drawCircle(leftPaddle, rightPaddle, rightScoreBoard, leftScoreBoard, mainMenu); // Ball Draw
rightPaddle.drawPaddle(mainMenu); // Right Paddle Draw
leftPaddle.drawPaddle(mainMenu); // Left Paddle Draw
rightScoreBoard.drawScoreBoard(); // Right Scoreboard Draw
leftScoreBoard.drawScoreBoard(); // Left Scoreboard Draw
}
Boolean info = false;

class Instructions {
String controlsRight;
float widthParameter, heightParameter, fontSize;
Instructions() {
  widthParameter = width;
  heightParameter = height;
  fontSize = heightParameter/20;
}
 public void instructionDraw(Paddle paddleCtrlRight, Paddle paddleCtrlLeft) {
PFont titleFont = createFont("Power Clear", 20);
gameBG.drawBG();
fill(0xFFD05CEA); //Ink
textAlign(CENTER, CENTER); //Align X&Y, see Processing.org / Reference
textFont(titleFont, width/15);
text("CONTROLS", width/2, height/6);
textFont(titleFont, fontSize); // Font Size
text("The right paddle moves up with " + "(" + str(paddleCtrlRight.up).toUpperCase() + ")", width/1.33f, height/2); // Paddle Right Top
text("and moves down with " + "(" + str(paddleCtrlRight.down).toUpperCase() + ")", width/1.33f, height/2 + fontSize); // Paddle Right Bottom
text("The left paddle moves up with " + "(" + str(paddleCtrlLeft.up).toUpperCase() + ")", width/4, height/2); // Paddle Left Top
text(" and moves down with " + "(" + str(paddleCtrlLeft.down).toUpperCase() + ")", width/4, height/2 + fontSize); // Paddle Left Bottom
textFont(titleFont, height/17);
text("(P) Main Menu", width/2, height/2.5f);
}

 public void instructionExit() {
 if (key == 'p' && info == false && start == false) { // Lowercase Input
   info = true;
 } else if (key == 'p' && info == true) {
   info = false;
 }
 if (key == 'P' && info == false && start == false) { // Capitalized Input
   info = true;
 } else if (key == 'P' && info == true) {
   info = false;
 }
}
}
class Paddle extends Shape {
  int c;
  int yVel;
  char up, down;
  Boolean moveCheckUp = false, moveCheckDown = false;


  Paddle(float x, float y, float w, float h, int cParameter, char upParameter, char downParameter) {
    super(x, y, w, h);
    y = y - h/2;
    c = cParameter;
    up = upParameter;
    down = downParameter;
    yVel = 10;
  }

   public void drawPaddle(GameMenu menuMain) {
    fill(c);
    rect(x, y, w, h);
    move(menuMain);
  }
   public void moveStart() {
    if (key == up) {
      moveCheckUp = true;
    }
    if (key == down) {
      moveCheckDown = true;
    }
  }
//
   public void move(GameMenu menuMain) {
    if (moveCheckUp && y > 0) {
      y -= (yVel* menuMain.paddleSpeed);
    }
    if (moveCheckDown && y + h < height) {
      y += (yVel* menuMain.paddleSpeed);
    }
  }
//
   public void moveStop() {
    if (key == up) {
      moveCheckUp = false;
    }
    if (key == down) {
      moveCheckDown = false;
    }
  }
  //Setter
  //Send paddle location to ball class for collision and bounce
}
class ScoreBoard extends Shape {
int c;
int score;

ScoreBoard(float x, float y, float w, float h) {
super(x, y, w, h);
c = 0xFF808080;
score = 0;
}

 public void drawScore() {
PFont titleFont = createFont("Power Clear", 20);
String scoreText = str(score);
fill(0xFFFFFFFF); //Ink
textAlign(CENTER, CENTER); //Align X&Y, see Processing.org / Reference
textFont(titleFont, y/1.1f); //Change the number until it fits, largest font size
text(scoreText, x, y, w, h);
}

 public void drawScoreBoard() {
fill(c);
rect(x, y, w, h);
drawScore();
}

}
abstract class Shape {
float x;
float y;
float w;
float h;

Shape(float xPara, float yPara, float wPara, float hPara) {
this.x = xPara;
this.y = yPara;
this.w = wPara;
this.h = hPara;
}

}


  public void settings() { fullScreen(); }

  static public void main(String[] passedArgs) {
    String[] appletArgs = new String[] { "Pong" };
    if (passedArgs != null) {
      PApplet.main(concat(appletArgs, passedArgs));
    } else {
      PApplet.main(appletArgs);
    }
  }
}
